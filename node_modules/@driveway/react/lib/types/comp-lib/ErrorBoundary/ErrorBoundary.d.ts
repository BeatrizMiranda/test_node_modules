import React, { ReactElement } from "react";
import { ErrorInfo, ReactNode } from "react";
/**
 * Note:
 *
 * Error boundaries do not catch errors for:
 *
 * - Event handlers (https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers)
 * - Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
 * - Server side rendering
 * - Errors thrown in the error boundary itself (rather than its children)
 *
 * For the above cases, prefer to provide custom error page handling or redirect
 * the user to `/error` which will render this same error page.
 **/
declare type Props = {
    children?: ReactNode;
    img: {
        alt: string;
        src: string;
    };
    title: string;
    description: string;
    to: string;
    link: ReactElement;
    testId: string;
    linkText: string;
    version: string;
    checkVersion?: boolean;
};
declare type ErrorPageProps = Props & {
    clearError?: () => void;
};
declare type State = {
    error: null | Error;
    errorInfo: null | ErrorInfo;
};
declare const ErrorPage: ({ img, title, description, to, linkText, link, clearError, testId, version, checkVersion, }: ErrorPageProps) => JSX.Element;
declare class ErrorBoundary extends React.Component<Props, State> {
    state: State;
    static getDerivedStateFromError(error: Error): State;
    componentDidCatch(error: Error, errorInfo: ErrorInfo): void;
    render(): React.ReactNode;
}
export default ErrorBoundary;
export { ErrorPage };
export type { Props as ErrorBoundaryProps, State as ErrorBoundaryState };
