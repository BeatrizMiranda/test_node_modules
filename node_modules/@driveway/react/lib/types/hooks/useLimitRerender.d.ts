/**
 * `useLimitRerender` is a utility to prevent infinite render loops in React by
 * keeping track of the number of times it is rendered per second. If the count
 * exceeds the maximum, an error is thrown for the caller to handle or crash
 * the application.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   useLimitRerender((renderCount) => {
 *     console.log(`Render limit reached: ${renderCount`);
 *   }, 100);
 *
 *   // Trivial example, but this is a new object every render, causing the
 *   // useEffect to fire, causing a render, infinitely until useLimitRerender
 *   // throws an error, triggering any error boundaries.
 *   const newObject = {};
 *
 *   useEffect(() => {
 *     console.log("rendering");
 *   }, [newObject]);
 *
 *   return null;
 * };
 * ```
 */
declare const DEFAULT_MAX_RENDERS = 200;
declare type LimitRerenderCallback = (renderCount: number) => void;
declare const useLimitRerender: (callback?: LimitRerenderCallback, maxRenders?: number) => number;
export default useLimitRerender;
export { DEFAULT_MAX_RENDERS };
export type { LimitRerenderCallback };
