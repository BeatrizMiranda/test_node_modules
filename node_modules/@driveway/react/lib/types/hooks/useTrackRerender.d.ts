/**
 * `useTrackRerender` is a debugging utility to help pinpoint React dependencies
 * used as props, inside `useEffect`, `useCallback`, or `useMemo` by keeping track of
 * the previous dependencies and comparing them each render.
 *
 * If any differences are found, they can be logged in the console by passing in
 * `{ log: true }` or they can be checked from the returned `propChanges` `ref`.
 *
 * Example
 *
 * ```
 * // Say we wrapped this in Memo to try and improve performance, but still see
 * // render issues
 * const Counter = React.memo((props) => {
 *   useTrackRerender("Counter", props);
 *   return <div style={props.style}>{props.count}</div>
 * });
 *
 * const App = () => {
 *   const [count, setCount] = useState(0);
 *   const [userId, setUserId] = useState(0);
 *
 *   // The console would tell us `counterStyle` is changing on every render
 *   // because this syntax results in a new object every render even when we
 *   // don't modify count.
 *   //
 *   // This could get moved outside our component body since it's constant, or
 *   // wrapped in `useMemo`
 *   const counterStyle = {
 *     fontSize: "3rem",
 *     color: "red",
 *   };
 *
 *   return (
 *     <div>
 *       <Counter count={count} style={counterStyle} />
 *       <button onClick={() => setCount((count) => count + 1)}>Increment</button>
 *       <button onClick={() => setUserId((userId) => userId + 1)}>Change User</button>
 *     </div>
 * };
 * ```
 *
 * Credit: https://usehooks.com/useWhyDidYouUpdate/
 */
/// <reference types="react" />
declare type PropChanges = {
    [key: string]: {
        from: any;
        to: any;
    };
};
declare type TrackRerenderOpts = {
    log?: boolean;
};
declare const useTrackRerender: <T extends Record<string, any>>(name: string, props: T, { log }?: TrackRerenderOpts) => import("react").MutableRefObject<PropChanges>;
export default useTrackRerender;
