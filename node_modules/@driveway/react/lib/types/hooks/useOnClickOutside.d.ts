/**
 * `useOnClickOutside` allows you to detect clicks outside a specific
 * element. It returns a `ref` you can pass to the target element and accepts a
 * `handler` to trigger when the element is clicked outside of and optional
 * `target` to attach the event handlers to.
 *
 * NOTE: Because `handler` is used in an `useEffect`, it should be wrapped in a
 * `useCallback` to avoid executing on every render.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const [modalOpen, setModalOpen] = useState(false);
 *   // Clicking outside the modal will close it
 *   const clickRef = useRef();
 *   useOnClickOutside(clickRef, () => setModalOpen(false));
 *
 *   return (
 *     <div>
 *       {modalOpen ? (
 *         <div ref={ref}>Here's a modal!</div>
 *       ) : (
 *         <button onClick={() => setModalOpen(true)}>Open</button>
 *       )}
 *     </div>
 *   );
 * };
 * ```
 *
 * Credit: https://usehooks.com/useOnClickOutside/
 */
import { RefObject } from "react";
declare type ClickHandler = (evt: Event) => void;
declare const useOnClickOutside: <T extends Element>(ref: RefObject<T>, handler: ClickHandler, element?: Document | HTMLElement) => void;
export default useOnClickOutside;
