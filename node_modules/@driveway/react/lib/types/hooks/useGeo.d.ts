/**
 * `useGeo` v2 provides transparent access to a users estimated location
 * based on a priority hierarchy including user override, home address, IP
 * geolocation and browser geolocation. The geolocation and geocoding is handled
 * using Google's Geolocation and Geocoding APIs.
 *
 * Requires a `<GeoProvider />` context with valid API keys.
 *
 * Provided values:
 *   - locations: An array of coords and partial addresses that most closely match the
 *     request.
 *   - getLocations: A method for getting a list of locations based on the
 *     current available priorities.
 *   - method: String representing the method for lookup
 *   - userOverride: Partial<Address> provided by user to provide a more accurate
 *     location
 *   - setUserOverride: Function to allow changing the userOverride
 *
 * Default priority hierarchy (first available):
 *   1. User override
 *   2. User home address (when logged in)
 *   3. IP Geolocation
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const { homeAddress } = useUserProfile();
 *   return (
 *     <GeoProvider
 *       timeZoneApiKey={Config.timeZoneApiKey}
 *       geoApiKey={Config.geoApiKey}
 *       homeAddress={homeAddress}
 *     >
 *       <Component />
 *     </GeoProvider>
 *   );
 * };
 *
 * const Component = () => {
 *   const { locations, getLocations, userOverride, setUserOverride } =
 *     useGeo();
 *
 *   useEffect(() => {
 *     getLocations();
 *   }, []);
 *
 *   return (
 *     <>
 *       <input
 *         type="text"
 *         id="postalCode"
 *         value={userOverride.postalCode}
 *         onChange={(evt: ChangeEvent) => {
 *           setUserOveride({ postalCode: evt.currentTarget.value });
 *         }}
 *       />
 *       <h1>Primary Location:</h1>
 *       <p>{locations[0]?.postalCode}</p>
 *     </>
 *   );
 * };
 * ```
 */
import { GeoAddress, GeoMethod } from "providers/GeoProvider";
import { SetStateAction } from "react";
/**
 * Options to configure location resolution. The `getLocations` method will try
 * each method in the priorities list until a successful result is found, or the
 * list is exhausted.
 */
declare type LocationOpts = {
    priorities?: GeoMethod[];
    timeout?: number;
};
/**
 * `useGeo` hook. Refer to the top of this page for documentation.
 */
declare const useGeo: ({ priorities: initialPriorities, timeout, }?: LocationOpts) => {
    locations: GeoAddress[];
    getLocations: (address?: GeoAddress) => Promise<GeoAddress[]>;
    method: GeoMethod | null | undefined;
    userOverride: GeoAddress | null;
    setUserOverride: (newValue: SetStateAction<null | GeoAddress>) => void;
};
export default useGeo;
