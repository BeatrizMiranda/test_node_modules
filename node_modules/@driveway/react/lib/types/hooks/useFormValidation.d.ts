/**
 * `useFormValidation` provides a helpful wrapper around typical controlled
 * form input validation state. It takes an initial value, a validator and
 * several options for handling events, filtering and debouncing.
 *
 * Example
 *
 * ```
 * const PhoneField = () => {
 *   const phone = useFormValidation("", validatePhone, {
 *     filter: filterNumbers,
 *     formatter: formatPhone,
 *   });
 *
 *   return (
 *     <>
 *       {!phone.isValid ? <p>{phone.error}</p> : null}
 *       <input
 *         value={phone.formatted}
 *         onChange={phone.onChange}
 *         onBlur={phone.onBlur}
 *       />
 *     </>
 *   );
 * };
 * ```
 */
import { ChangeEvent, Dispatch, FocusEvent, SetStateAction } from "react";
declare type FormValidationError = null | string;
declare type FormValidationResult = [boolean, FormValidationError];
declare type FormFormatterFn<T> = (value: T) => T;
declare type FormFilterFn<T> = (value: T) => T;
declare type FormSetValueFn<T> = Dispatch<SetStateAction<T>>;
declare type FormOnChangeFn<E> = (evt: ChangeEvent<E>) => void;
declare type FormOnFocusFn<E> = (evt: FocusEvent<E>) => void;
declare type FormOnBlurFn<E> = (evt: FocusEvent<E>) => void;
declare type FormValidationFn<T> = (value: T) => FormValidationResult;
declare type FormValidationOptions<T, E> = {
    debounceDelay?: number;
    onChange?: FormOnChangeFn<E>;
    validateOnChange?: boolean;
    clearErrorOnChange?: boolean;
    onFocus?: FormOnFocusFn<E>;
    onBlur?: FormOnBlurFn<E>;
    formatter?: FormFormatterFn<T>;
    filter?: FormFilterFn<T>;
};
declare type FormValidationHookResult<T, E> = {
    value: T;
    setValue: FormSetValueFn<T>;
    formatted: T;
    error: FormValidationError;
    isValid: boolean;
    validate: () => boolean;
    onChange: FormOnChangeFn<E>;
    onFocus: FormOnFocusFn<E>;
    onBlur: FormOnBlurFn<E>;
};
declare const validateFields: <T, E>(fields: FormValidationHookResult<T, E>[]) => boolean;
declare const useFormValidation: <T extends string | number | boolean, E extends HTMLInputElement | HTMLSelectElement | HTMLOptionElement>(initialValue: T, validator?: FormValidationFn<T> | undefined, opts?: FormValidationOptions<T, E> | undefined) => FormValidationHookResult<T, E>;
export default useFormValidation;
export { validateFields };
export type { FormValidationError, FormValidationOptions, FormValidationResult, FormFormatterFn, FormFilterFn, FormValidationFn, FormOnChangeFn, FormSetValueFn, FormValidationHookResult, };
