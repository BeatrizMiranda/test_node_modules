/**
 * `useDebounce` allows you to reduce the frequency of updates on a fast
 * changing value. The debounced value will only reflect the latest value once
 * the fast changes have slowed or stopped within a certain `delay`.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const [search, setSearch] = useState("");
 *   const debouncedSearch = useDebounce(search);
 *   const [results, setResults] = useState([]);
 *
 *   useEffect(() = {
 *     if (debouncedSearch) {
 *       getResults(debouncedSearch)
 *         .then((results) => setResults(results));
 *     } else {
 *       setResults([]);
 *     }
 *   }, [debouncedSearch]);
 *
 *   return (
 *     <>
 *       <input
 *         placeholder="Search"
 *         onChange={(evt) => setSearch(evt.currentTarget.value)}
 *       />
 *       {results.map((result) => (
 *         <h4 key={result.id}>{result.title}</h4>
 *       ))}
 *     </>
 *   );
 * };
 * ```
 *
 * Credit: https://usehooks.com/useDebounce/
 */
declare const defaultDelay: number;
declare const useDebounce: <T>(value: T, delay?: number) => T;
export default useDebounce;
export { defaultDelay };
