/**
 * `useTimeZone` is a wrapper around Google's Timezone API. It accepts either a
 * partial `Address` or `Coords` object and returns several timezone properties
 * that can be used to construct the correct local time for the user.
 *
 * Requires a `<GeoProvider />` context with valid API keys.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const { getTimeZone } = useTimeZone();
 *   const [timeZone, setTimeZone] = useState("America/Los_Angeles");
 *
 *   useEffect(() => {
 *     getTimeZone({ city: "Detroit", state: "MI" })
 *       .then(({ timeZoneId }) => setTimeZone(timeZoneId));
 *   }, [getTimeZone]);
 *
 *   return <div>Detroit, MI is in the {timeZone} timezone.</div>;
 * };
 * ```
 */
import { GeoAddress } from "providers/GeoProvider";
declare const mockTimeZone: TimeZoneResult;
declare type TimeZoneResult = {
    dstOffset: number;
    localTime: number;
    rawOffset: number;
    timeZoneId: string;
    timeZoneName: string;
};
declare const stringifyLocation: (location: GeoAddress) => string;
declare const useTimeZone: () => {
    timeZone: TimeZoneResult | null;
    getTimeZone: (location: GeoAddress, timestamp: number) => Promise<TimeZoneResult>;
};
export default useTimeZone;
export type { TimeZoneResult };
export { mockTimeZone, stringifyLocation };
