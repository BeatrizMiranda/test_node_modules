/**
 * `useThrottle` helps run a function only once every interval period of
 * time. Similar to `useDebounce` except more frequent execution like when a
 * window resizes, or mouse position changes.
 *
 * The below example highlights the difference. `useDebounce` would update
 * `value` once, when the user finishes typing. `useThrottle`, however, updates
 * every 500ms, even if the user is still typing.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const [value, setValue] = useState();
 *   const throttledValue = useThrottle(value);
 *
 *   const onChange = (evt: React.ChangeEvent) {
 *     setValue(event.currentTarget.value);
 *   };
 *
 *   return (
 *     <div>
 *       Input: <input value={value} onChange={onChange} />
 *       <p>Throttled value: {throttledValue}</p>
 *     </div>
 *   );
 * };
 * ```
 *
 * Credit: https://dev.to/loonywizard/react-usethrottle-hook-87h
 */
declare const defaultInterval = 500;
declare const useThrottle: <T>(value: T, interval?: number) => T;
export default useThrottle;
export { defaultInterval };
