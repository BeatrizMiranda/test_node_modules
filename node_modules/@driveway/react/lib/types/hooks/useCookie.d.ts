/**
 * `useCookie` provides a simple wrapper around the `document.cookie`
 * protocol. It behaves similar to `useState` except that it maintains the state
 * in a cookie with an expiration and SameSite attribute.
 *
 * Example
 *
 * ```
 * const UserProfile = () => {
 *   // cacheDays defaults to 30
 *   const [lastVisited, setLastVisited] = useCookie("lastVisited", Date.now(), {
 *     sameSite: "strict",
 *   });
 *
 *   useEffect(() => {
 *     setLastVisited(Date.now());
 *   });
 *
 *   return lastVisited > 0 ? <h1>Welcome, back!</h1> : <h1>Welcome!</h1>;
 * };
 * ```
 */
import { Dispatch, SetStateAction } from "react";
declare type SameSite = "lax" | "strict" | "none";
declare type CookieOpts = {
    expireDays?: number;
    domain?: string;
    path?: string;
    secure?: boolean;
    sameSite?: SameSite;
};
declare type CookieResult<Data> = [Data, Dispatch<SetStateAction<Data>>];
declare const retrieveCookie: <Data>(key: string) => Data | null;
declare const storeCookie: <Data>(key: string, value: Data, { expireDays, domain, secure, sameSite, path, }?: CookieOpts) => string;
declare const clearCookie: (key: string, path?: string) => void;
declare const useCookie: <Data>(key: string, initialValue: Data, opts?: CookieOpts) => CookieResult<Data>;
export default useCookie;
export { storeCookie, retrieveCookie, clearCookie };
export type { SameSite, CookieOpts };
