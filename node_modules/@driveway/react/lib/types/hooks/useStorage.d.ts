/**
 * `useStorage` is a hook for managing `localStorage` and `sessionStorage` as
 * component state. It is similar to `useState` except that it maintains the
 * state in browser storage instead allowing the state to persist through page
 * refreshes. It supports a server-rendered environment as well, where these
 * storage mechanisms don't exist.
 *
 * To clear a value entirely (remove from storage), set value to `null`.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   const [name, setName] = useStorage("name", "bob", {
 *     storageArea: "session",
 *   });
 *
 *   return (
 *     <div>
 *       <input
 *         type="text"
 *         placeholder="Enter your name"
 *         value={name}
 *         onChange={(evt) => setName(evt.currentTarget.value)}
 *       />
 *     </div>
 *   );
 * };
 * ```
 *
 * Credit: https://usehooks.com/useLocalStorage/
 */
import { Dispatch, SetStateAction } from "react";
declare type StorageOpts = {
    storageArea?: "local" | "session";
    sync?: boolean;
};
declare type UseStorageResult<Data> = [Data, Dispatch<SetStateAction<Data>>];
declare const useStorage: <Data>(key: string, initialValue?: Data | undefined, { storageArea, sync }?: StorageOpts) => UseStorageResult<Data>;
export default useStorage;
export type { StorageOpts };
