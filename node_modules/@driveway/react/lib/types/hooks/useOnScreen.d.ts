/**
 * `useOnScreen` detects whether an element is visible on screen or within a
 * given `root` element as well as how much of the element should be visible
 * before being considered `on screen`. Great for lazy loading of images or
 * components.
 *
 * Example
 *
 * ```
 * const App = () => {
 *   // Element is on screen when 300px of it are visible
 *   const elementRef = useRef<HTMLDivElement>(null);
 *   const isVisible = useOnScreen(elementRef, "-300px");
 *
 *   return (
 *     <div>
 *       <div style={{ height: "100vh" }}>
 *         <h1>Scroll down for more content</h1>
 *       </div>
 *       <div ref={elementRef} style={{ height: "100vh" }}>
 *         {isVisible ? (
 *           <div>I'm visible!</div>
 *         ) : (
 *           <h1>Scroll down 300px more</h1>
 *         )}
 *       </div>
 *     </div>
 *   );
 * };
 * ```
 *
 * Credit: https://usehooks.com/useOnScreen/
 */
import { RefObject } from "react";
declare const useOnScreen: <T extends Element>(ref: RefObject<T>, rootMargin?: string, triggerOnce?: boolean, root?: Document | Element) => boolean;
export default useOnScreen;
