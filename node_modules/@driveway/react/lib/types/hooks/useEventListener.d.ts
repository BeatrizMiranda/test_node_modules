/**
 * `useEventListener` makes it ease to set up event listeners without the
 * `useEffect` boilerplate. Simply use it the same as `addEventListener`. The
 * third parameter allows customizing which element the listener is attached to.
 *
 * Example
 *
 * ```
 * const Add = () => {
 *   const [coords, setCoords] = useState({ x: 0, y: 0 });
 *
 *   const handler = ({ clientX, clientY }) => {
 *     setCoords({ x: clientX, y: clientY });
 *   };
 *
 *   useEventListner("mousemove", handler);
 *
 *   return (
 *     <div>
 *       Mouse position: ({coords.x}, {coords.y})
 *     </div>
 *   );
 * };
 * ```
 *
 * Credit: https://usehooks.com/useEventListener/
 */
import { RefObject } from "react";
interface UseEventListener {
    <K extends keyof WindowEventMap>(eventName: K, handler: (evt: WindowEventMap[K]) => void): void;
    <K extends keyof HTMLElementEventMap, T extends HTMLElement = HTMLDivElement>(eventName: K, handler: (evt: HTMLElementEventMap[K]) => void, element: RefObject<T>): void;
}
declare const useEventListener: UseEventListener;
export default useEventListener;
