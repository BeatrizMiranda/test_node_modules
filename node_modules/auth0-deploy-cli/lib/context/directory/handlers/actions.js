"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _tools = require("../../../tools");

var _utils = require("../../../utils");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(context) {
  const actionsFolder = _path2.default.join(context.filePath, _tools.constants.ACTIONS_DIRECTORY);

  if (!(0, _utils.existsMustBeDir)(actionsFolder)) return {
    actions: undefined
  };
  const files = (0, _utils.getFiles)(actionsFolder, ['.json']);
  const actions = files.map(file => {
    const action = { ...(0, _utils.loadJSON)(file, context.mappings)
    };

    const actionFolder = _path2.default.join(_tools.constants.ACTIONS_DIRECTORY, `${action.name}`);

    if (action.code) {
      action.code = context.loadFile(action.code, actionFolder);
    }

    return action;
  });
  return {
    actions
  };
}

function mapSecrets(secrets) {
  if (secrets && secrets.length > 0) {
    return secrets.map(secret => ({
      name: secret.name,
      value: secret.value
    }));
  }

  return [];
}

function mapActionCode(filePath, action) {
  const {
    code
  } = action;

  if (!code) {
    return '';
  }

  const actionName = (0, _utils.sanitize)(action.name);

  const actionFolder = _path2.default.join(filePath, _tools.constants.ACTIONS_DIRECTORY, `${actionName}`);

  _fsExtra2.default.ensureDirSync(actionFolder);

  const codeFile = _path2.default.join(actionFolder, 'code.js');

  _logger2.default.info(`Writing ${codeFile}`);

  _fsExtra2.default.writeFileSync(codeFile, code);

  return `${codeFile}`;
}

function mapToAction(filePath, action) {
  return {
    name: action.name,
    code: mapActionCode(filePath, action),
    runtime: action.runtime,
    status: action.status,
    dependencies: action.dependencies || [],
    secrets: mapSecrets(action.secrets),
    supported_triggers: action.supported_triggers,
    deployed: action.deployed || action.all_changes_deployed
  };
}

async function dump(context) {
  const actions = [...(context.assets.actions || [])];
  if (actions.length < 1) return;

  const actionsFolder = _path2.default.join(context.filePath, _tools.constants.ACTIONS_DIRECTORY);

  _fsExtra2.default.ensureDirSync(actionsFolder);

  actions.forEach(action => {
    const name = (0, _utils.sanitize)(action.name);

    const actionFile = _path2.default.join(actionsFolder, `${name}.json`);

    _logger2.default.info(`Writing ${actionFile}`);

    _fsExtra2.default.writeFileSync(actionFile, JSON.stringify(mapToAction(context.filePath, action), null, 2));
  });
}

exports.default = {
  parse,
  dump
};