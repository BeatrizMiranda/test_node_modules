"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _tools = require("../../../tools");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDatabase(folder, mappings) {
  const metaFile = _path2.default.join(folder, 'database.json');

  let metaData = {};

  try {
    metaData = (0, _utils.loadJSON)(metaFile, mappings);
  } catch (err) {
    _logger2.default.warn(`Skipping database folder ${folder} as cannot find or read ${metaFile}`);

    return {};
  }

  if (!metaData) {
    _logger2.default.warn(`Skipping database folder ${folder} as ${metaFile} is empty`);

    return {};
  }

  const database = { ...metaData,
    options: { ...metaData.options,
      ...(metaData.customScripts && {
        customScripts: metaData.customScripts
      })
    }
  };

  if (database.options.customScripts) {
    Object.entries(database.options.customScripts).forEach(([name, script]) => {
      if (!_tools.constants.DATABASE_SCRIPTS.includes(name)) {
        _logger2.default.warn('Skipping invalid database configuration: ' + name);
      } else {
        database.options.customScripts[name] = (0, _tools.loadFile)(_path2.default.join(folder, script), mappings);
      }
    });
  }

  return database;
}

function parse(context) {
  const databaseFolder = _path2.default.join(context.filePath, _tools.constants.DATABASE_CONNECTIONS_DIRECTORY);

  if (!(0, _utils.existsMustBeDir)(databaseFolder)) return {
    databases: undefined
  };

  const folders = _fsExtra2.default.readdirSync(databaseFolder).map(f => _path2.default.join(databaseFolder, f)).filter(f => (0, _utils.isDirectory)(f));

  const databases = folders.map(f => getDatabase(f, context.mappings)).filter(p => Object.keys(p).length > 1);
  return {
    databases
  };
}

async function dump(context) {
  const {
    databases
  } = context.assets;
  if (!databases) return;

  const databasesFolder = _path2.default.join(context.filePath, _tools.constants.DATABASE_CONNECTIONS_DIRECTORY);

  _fsExtra2.default.ensureDirSync(databasesFolder);

  databases.forEach(database => {
    const dbFolder = _path2.default.join(databasesFolder, (0, _utils.sanitize)(database.name));

    _fsExtra2.default.ensureDirSync(dbFolder);

    const sortCustomScripts = ([name1], [name2]) => {
      if (name1 === name2) return 0;
      return name1 > name2 ? 1 : -1;
    };

    const formatted = { ...database,
      ...(database.enabled_clients && {
        enabled_clients: (0, _utils.mapClientID2NameSorted)(database.enabled_clients, context.assets.clientsOrig)
      }),
      options: { ...database.options,
        ...(database.options.customScripts && {
          customScripts: Object.entries(database.options.customScripts).sort(sortCustomScripts).reduce((scripts, [name, script]) => {
            const scriptName = (0, _utils.sanitize)(`${name}.js`);

            const scriptFile = _path2.default.join(dbFolder, scriptName);

            _logger2.default.info(`Writing ${scriptFile}`);

            _fsExtra2.default.writeFileSync(scriptFile, script);

            scripts[name] = `./${scriptName}`;
            return scripts;
          }, {})
        })
      }
    };

    const databaseFile = _path2.default.join(dbFolder, 'database.json');

    (0, _utils.dumpJSON)(databaseFile, formatted);
  });
}

exports.default = {
  parse,
  dump
};