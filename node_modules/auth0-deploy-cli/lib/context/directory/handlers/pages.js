"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _tools = require("../../../tools");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(context) {
  const pagesFolder = _path2.default.join(context.filePath, _tools.constants.PAGES_DIRECTORY);

  if (!(0, _utils.existsMustBeDir)(pagesFolder)) return {
    pages: undefined
  };
  const files = (0, _utils.getFiles)(pagesFolder, ['.json', '.html']);
  const sorted = {};
  files.forEach(file => {
    const {
      ext,
      name
    } = _path2.default.parse(file);

    if (!sorted[name]) sorted[name] = {};
    if (ext === '.json') sorted[name].meta = file;
    if (ext === '.html') sorted[name].html = file;
  });
  const pages = [];
  Object.values(sorted).forEach(data => {
    if (!data.meta) {
      _logger2.default.warn(`Skipping pages file ${data.html} as missing the corresponding '.json' file`);
    } else if (!data.html) {
      _logger2.default.warn(`Skipping pages file ${data.meta} as missing corresponding '.html' file`);
    } else {
      pages.push({ ...(0, _utils.loadJSON)(data.meta, context.mappings),
        html: (0, _tools.loadFile)(data.html, context.mappings)
      });
    }
  });
  return {
    pages
  };
}

async function dump(context) {
  const pages = [...(context.assets.pages || [])];
  if (!pages) return;

  const pagesFolder = _path2.default.join(context.filePath, _tools.constants.PAGES_DIRECTORY);

  _fsExtra2.default.ensureDirSync(pagesFolder);

  pages.forEach(page => {
    var metadata = { ...page
    };

    if (page.name !== 'error_page' || page.html !== undefined) {
      const htmlFile = _path2.default.join(pagesFolder, `${page.name}.html`);

      _logger2.default.info(`Writing ${htmlFile}`);

      _fsExtra2.default.writeFileSync(htmlFile, page.html);

      metadata.html = `./${page.name}.html`;
    }

    const pageFile = _path2.default.join(pagesFolder, `${page.name}.json`);

    (0, _utils.dumpJSON)(pageFile, metadata);
  });
}

exports.default = {
  parse,
  dump
};