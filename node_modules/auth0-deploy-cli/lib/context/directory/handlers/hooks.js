"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _tools = require("../../../tools");

var _utils = require("../../../utils");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(context) {
  const hooksFolder = _path2.default.join(context.filePath, _tools.constants.HOOKS_DIRECTORY);

  if (!(0, _utils.existsMustBeDir)(hooksFolder)) return {
    hooks: undefined
  };
  const files = (0, _utils.getFiles)(hooksFolder, ['.json']);
  const hooks = files.map(f => {
    const hook = { ...(0, _utils.loadJSON)(f, context.mappings)
    };

    if (hook.script) {
      hook.script = context.loadFile(hook.script, _tools.constants.HOOKS_DIRECTORY);
    }

    hook.name = hook.name.toLowerCase().replace(/\s/g, '-');
    return hook;
  });
  return {
    hooks
  };
}

async function dump(context) {
  const hooks = [...(context.assets.hooks || [])];
  if (hooks.length < 1) return;

  const hooksFolder = _path2.default.join(context.filePath, _tools.constants.HOOKS_DIRECTORY);

  _fsExtra2.default.ensureDirSync(hooksFolder);

  hooks.forEach(hook => {
    hook.name = hook.name || hook.id;
    const name = (0, _utils.sanitize)(hook.name);

    const hookCode = _path2.default.join(hooksFolder, `${name}.js`);

    _logger2.default.info(`Writing ${hookCode}`);

    _fsExtra2.default.writeFileSync(hookCode, hook.script);

    const hookFile = _path2.default.join(hooksFolder, `${name}.json`);

    (0, _utils.dumpJSON)(hookFile, { ...hook,
      script: `./${name}.js`
    });
  });
}

exports.default = {
  parse,
  dump
};