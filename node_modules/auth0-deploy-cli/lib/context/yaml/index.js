"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _jsYaml = require("js-yaml");

var _jsYaml2 = _interopRequireDefault(_jsYaml);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _tools = require("../../tools");

var _logger = require("../../logger");

var _logger2 = _interopRequireDefault(_logger);

var _utils = require("../../utils");

var _handlers = require("./handlers");

var _handlers2 = _interopRequireDefault(_handlers);

var _readonly = require("../../readonly");

var _readonly2 = _interopRequireDefault(_readonly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = class {
  constructor(config, mgmtClient) {
    this.configFile = config.AUTH0_INPUT_FILE;
    this.config = config;
    this.mappings = config.AUTH0_KEYWORD_REPLACE_MAPPINGS;
    this.mgmtClient = mgmtClient;
    this.assets = {
      exclude: {
        rules: config.AUTH0_EXCLUDED_RULES || [],
        clients: config.AUTH0_EXCLUDED_CLIENTS || [],
        databases: config.AUTH0_EXCLUDED_DATABASES || [],
        connections: config.AUTH0_EXCLUDED_CONNECTIONS || [],
        resourceServers: config.AUTH0_EXCLUDED_RESOURCE_SERVERS || [],
        defaults: config.AUTH0_EXCLUDED_DEFAULTS || []
      }
    };
    this.basePath = config.AUTH0_BASE_PATH;

    if (!this.basePath) {
      this.basePath = typeof configFile === 'object' ? process.cwd() : _path2.default.dirname(this.configFile);
    }
  }

  loadFile(f) {
    let toLoad = _path2.default.join(this.basePath, f);

    if (!(0, _utils.isFile)(toLoad)) {
      toLoad = f;
    }

    return (0, _tools.loadFile)(_path2.default.resolve(toLoad), this.mappings);
  }

  async load() {
    if (typeof this.configFile === 'object') {
      this.assets = this.configFile;
    } else {
      try {
        const fPath = _path2.default.resolve(this.configFile);

        _logger2.default.debug(`Loading YAML from ${fPath}`);

        Object.assign(this.assets, _jsYaml2.default.load((0, _tools.keywordReplace)(_fsExtra2.default.readFileSync(fPath, 'utf8'), this.mappings)) || {});
      } catch (err) {
        _logger2.default.debug(err.stack);

        throw new Error(`Problem loading ${this.configFile}\n${err}`);
      }
    }

    const auth0 = new _tools.Auth0(this.mgmtClient, this.assets, (0, _utils.toConfigFn)(this.config));
    await auth0.validate('validate');
    await Promise.all(Object.entries(_handlers2.default).map(async ([name, handler]) => {
      try {
        const parsed = await handler.parse(this);
        Object.entries(parsed).forEach(([k, v]) => {
          this.assets[k] = v;
        });
      } catch (err) {
        _logger2.default.debug(err.stack);

        throw new Error(`Problem deploying ${name}`);
      }
    }));
  }

  async dump() {
    const auth0 = new _tools.Auth0(this.mgmtClient, this.assets, (0, _utils.toConfigFn)(this.config));

    _logger2.default.info('Loading Auth0 Tenant Data');

    try {
      await auth0.loadAll();
      this.assets = auth0.assets;
    } catch (err) {
      const docUrl = 'https://auth0.com/docs/deploy/deploy-cli-tool/create-and-configure-the-deploy-cli-application#modify-deploy-cli-application-scopes';
      const extraMessage = err.message.startsWith('Insufficient scope') ? `\nSee ${docUrl} for more information` : '';
      throw new Error(`Problem loading tenant data from Auth0 ${err}${extraMessage}`);
    }

    await Promise.all(Object.entries(_handlers2.default).map(async ([name, handler]) => {
      try {
        const data = await handler.dump(this);

        if (data) {
          _logger2.default.info(`Exporting ${name}`);

          Object.entries(data).forEach(([k, v]) => {
            this.assets[k] = Array.isArray(v) ? v.map(_utils.formatResults).sort(_utils.recordsSorter) : (0, _utils.formatResults)(v);
          });
        }
      } catch (err) {
        _logger2.default.debug(err.stack);

        throw new Error(`Problem exporting ${name}`);
      }
    }));
    let cleaned = (0, _readonly2.default)(this.assets, this.config);
    delete cleaned.exclude;

    if (!this.config.AUTH0_EXPORT_IDENTIFIERS) {
      cleaned = (0, _utils.stripIdentifiers)(auth0, cleaned);
    }

    const raw = _jsYaml2.default.dump(cleaned);

    _logger2.default.info(`Writing ${this.configFile}`);

    _fsExtra2.default.writeFileSync(this.configFile, raw);
  }

};