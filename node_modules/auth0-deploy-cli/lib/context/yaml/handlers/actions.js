"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _tools = require("../../../tools");

var _utils = require("../../../utils");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseCode(context, code) {
  if (code) {
    return context.loadFile(code, _tools.constants.ACTIONS_DIRECTORY);
  }
}

async function parse(context) {
  if (!context.assets.actions) return [];
  const actions = {
    actions: [...context.assets.actions.map(action => ({ ...action,
      code: parseCode(context, action.code)
    }))]
  };
  return actions;
}

function mapSecrets(secrets) {
  if (secrets && secrets.length > 0) {
    return secrets.map(secret => ({
      name: secret.name,
      value: secret.value
    }));
  }

  return [];
}

function mapActionCode(basePath, action) {
  const {
    code
  } = action;

  if (!code) {
    return '';
  }

  const actionName = (0, _utils.sanitize)(action.name);

  const actionVersionsFolder = _path2.default.join(basePath, _tools.constants.ACTIONS_DIRECTORY, actionName);

  _fsExtra2.default.ensureDirSync(actionVersionsFolder);

  const codeFile = _path2.default.join(actionVersionsFolder, 'code.js');

  _logger2.default.info(`Writing ${codeFile}`);

  _fsExtra2.default.writeFileSync(codeFile, code);

  return `./${_tools.constants.ACTIONS_DIRECTORY}/${actionName}/code.js`;
}

async function dump(context) {
  const {
    actions
  } = context.assets;
  if (!actions) return;
  return {
    actions: actions.map(action => ({
      name: action.name,
      deployed: action.deployed || action.all_changes_deployed,
      code: mapActionCode(context.basePath, action),
      runtime: action.runtime,
      dependencies: action.dependencies || [],
      status: action.status,
      secrets: mapSecrets(action.secrets),
      supported_triggers: action.supported_triggers
    }))
  };
}

exports.default = {
  parse,
  dump
};