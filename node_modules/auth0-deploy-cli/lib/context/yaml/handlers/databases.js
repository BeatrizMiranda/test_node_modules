"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _utils = require("../../../utils");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function parse(context) {
  if (!context.assets.databases) return {};
  return {
    databases: [...context.assets.databases.map(database => ({ ...database,
      options: { ...database.options,
        ...(database.options.customScripts && {
          customScripts: Object.entries(database.options.customScripts).reduce((scripts, [name, script]) => ({ ...scripts,
            [name]: context.loadFile(script)
          }), {})
        })
      }
    }))]
  };
}

async function dump(context) {
  const {
    databases
  } = context.assets;
  if (!databases) return {};

  const sortCustomScripts = ([name1], [name2]) => {
    if (name1 === name2) return 0;
    return name1 > name2 ? 1 : -1;
  };

  return {
    databases: [...databases.map(database => ({ ...database,
      ...(database.enabled_clients && {
        enabled_clients: (0, _utils.mapClientID2NameSorted)(database.enabled_clients, context.assets.clients)
      }),
      options: { ...database.options,
        ...(database.options.customScripts && {
          customScripts: Object.entries(database.options.customScripts).sort(sortCustomScripts).reduce((scripts, [name, script]) => {
            const dbName = (0, _utils.sanitize)(database.name);

            const dbFolder = _path2.default.join(context.basePath, 'databases', (0, _utils.sanitize)(dbName));

            _fsExtra2.default.ensureDirSync(dbFolder);

            const scriptName = (0, _utils.sanitize)(name);

            const scriptFile = _path2.default.join(dbFolder, `${scriptName}.js`);

            _logger2.default.info(`Writing ${scriptFile}`);

            _fsExtra2.default.writeFileSync(scriptFile, script);

            scripts[name] = `./databases/${dbName}/${scriptName}.js`;
            return scripts;
          }, {})
        })
      }
    }))]
  };
}

exports.default = {
  parse,
  dump
};