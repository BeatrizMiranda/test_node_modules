"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _tools = require("../../../tools");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function parse(context) {
  const {
    connections
  } = context.assets;

  const connectionsFolder = _path2.default.join(context.basePath, _tools.constants.CONNECTIONS_DIRECTORY);

  if (!connections || !connections.length) {
    return {
      connections: context.assets.connections
    };
  }

  return {
    connections: [...connections.map(connection => {
      if (connection.strategy === 'email') {
        (0, _utils.ensureProp)(connection, 'options.email.body');

        const htmlFileName = _path2.default.join(connectionsFolder, connection.options.email.body);

        if ((0, _utils.isFile)(htmlFileName)) {
          connection.options.email.body = context.loadFile(htmlFileName);
        }
      }

      return connection;
    })]
  };
}

const getFormattedOptions = (connection, clients) => {
  try {
    return {
      options: { ...connection.options,
        idpinitiated: { ...connection.options.idpinitiated,
          client_id: (0, _utils.convertClientIdToName)(connection.options.idpinitiated.client_id, clients)
        }
      }
    };
  } catch (e) {
    return {};
  }
};

async function dump(context) {
  const {
    connections
  } = context.assets;
  if (!connections) return {};
  return {
    connections: connections.map(connection => {
      const dumpedConnection = { ...connection,
        ...getFormattedOptions(connection, context.assets.clients),
        ...(connection.enabled_clients && {
          enabled_clients: (0, _utils.mapClientID2NameSorted)(connection.enabled_clients, context.assets.clients)
        })
      };

      if (dumpedConnection.strategy === 'email') {
        (0, _utils.ensureProp)(connection, 'options.email.body');

        const connectionsFolder = _path2.default.join(context.basePath, _tools.constants.CONNECTIONS_DIRECTORY);

        const connectionName = (0, _utils.sanitize)(dumpedConnection.name);
        const html = dumpedConnection.options.email.body;

        const emailConnectionHtml = _path2.default.join(connectionsFolder, `${connectionName}.html`);

        _logger2.default.info(`Writing ${emailConnectionHtml}`);

        _fsExtra2.default.ensureDirSync(connectionsFolder);

        _fsExtra2.default.writeFileSync(emailConnectionHtml, html);

        dumpedConnection.options.email.body = `./${connectionName}.html`;
      }

      return dumpedConnection;
    })
  };
}

exports.default = {
  parse,
  dump
};