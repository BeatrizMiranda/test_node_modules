"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _tools = require("../../../tools");

var _utils = require("../../../utils");

var _logger = require("../../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function parse(context) {
  if (!context.assets.hooks) return {};
  return {
    hooks: [...context.assets.hooks.map(hook => {
      if (hook.script) {
        hook.script = context.loadFile(hook.script, _tools.constants.HOOKS_DIRECTORY);
      }

      hook.name = hook.name.toLowerCase().replace(/\s/g, '-');
      return { ...hook
      };
    })]
  };
}

async function dump(context) {
  let hooks = [...(context.assets.hooks || [])];

  if (hooks.length > 0) {
    const hooksFolder = _path2.default.join(context.basePath, 'hooks');

    _fsExtra2.default.ensureDirSync(hooksFolder);

    hooks = hooks.map(hook => {
      hook.name = hook.name || hook.id;
      const codeName = (0, _utils.sanitize)(`${hook.name}.js`);

      const codeFile = _path2.default.join(hooksFolder, codeName);

      _logger2.default.info(`Writing ${codeFile}`);

      _fsExtra2.default.writeFileSync(codeFile, hook.script);

      return { ...hook,
        script: `./hooks/${codeName}`
      };
    });
  }

  return {
    hooks
  };
}

exports.default = {
  parse,
  dump
};