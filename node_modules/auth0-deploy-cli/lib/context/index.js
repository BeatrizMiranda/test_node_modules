"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = async function (config) {
  const errors = [];
  if (!config.AUTH0_DOMAIN) errors.push('AUTH0_DOMAIN');

  if (!config.AUTH0_ACCESS_TOKEN) {
    if (!config.AUTH0_CLIENT_ID) errors.push('AUTH0_CLIENT_ID');
    if (!config.AUTH0_CLIENT_SECRET) errors.push('AUTH0_CLIENT_SECRET');
  }

  if (errors.length > 0) {
    throw new Error(`The following parameters were missing. Please add them to your config.json or as an environment variable. ${JSON.stringify(errors)}`);
  }

  let accessToken = config.AUTH0_ACCESS_TOKEN;

  if (!accessToken) {
    const authClient = new _auth.AuthenticationClient({
      domain: config.AUTH0_DOMAIN,
      clientId: config.AUTH0_CLIENT_ID,
      clientSecret: config.AUTH0_CLIENT_SECRET
    });
    const clientCredentials = await authClient.clientCredentialsGrant({
      audience: config.AUTH0_AUDIENCE ? config.AUTH0_AUDIENCE : `https://${config.AUTH0_DOMAIN}/api/v2/`
    });
    accessToken = clientCredentials.access_token;
  }

  const mgmtClient = new _auth.ManagementClient({
    domain: config.AUTH0_DOMAIN,
    token: accessToken,
    retry: {
      maxRetries: config.AUTH0_API_MAX_RETRIES || 10,
      enabled: true
    },
    headers: {
      'User-agent': `deploy-cli/${_package.version} (node.js/${process.version.replace('v', '')})`
    }
  });
  const inputFile = config.AUTH0_INPUT_FILE;

  const ensureObject = (key, value) => {
    if (typeof value === 'string') {
      try {
        return JSON.parse(value);
      } catch (e) {
        _logger2.default.debug(`Cannot convert config.${key} to an object. Error: ${e.message}`);

        return value;
      }
    }

    return value;
  };

  nonPrimitiveProps.forEach(key => {
    if (config[key]) {
      config[key] = ensureObject(key, config[key]);
    }
  });

  if (typeof inputFile === 'object') {
    return new _yaml2.default(config, mgmtClient);
  }

  if ((0, _utils.isDirectory)(inputFile)) {
    return new _directory2.default(config, mgmtClient);
  }

  const ext = _path2.default.extname(inputFile);

  if (ext === '.yaml' || ext === '.yml') {
    return new _yaml2.default(config, mgmtClient);
  }

  throw new Error(`Unable to determine context processor to load for file ${inputFile}, does it exist? `);
};

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _auth = require("auth0");

var _yaml = require("./yaml");

var _yaml2 = _interopRequireDefault(_yaml);

var _directory = require("./directory");

var _directory2 = _interopRequireDefault(_directory);

var _utils = require("../utils");

var _package = require("../../package.json");

var _logger = require("../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const nonPrimitiveProps = ['AUTH0_KEYWORD_REPLACE_MAPPINGS', 'AUTH0_EXCLUDED_RULES', 'AUTH0_EXCLUDED_CLIENTS', 'AUTH0_EXCLUDED_DATABASES', 'AUTH0_EXCLUDED_CONNECTIONS', 'AUTH0_EXCLUDED_RESOURCE_SERVERS', 'AUTH0_EXCLUDED_DEFAULTS', 'EXCLUDED_PROPS', 'INCLUDED_PROPS'];