"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDirectory = isDirectory;
exports.isFile = isFile;
exports.getFiles = getFiles;
exports.loadJSON = loadJSON;
exports.dumpJSON = dumpJSON;
exports.existsMustBeDir = existsMustBeDir;
exports.toConfigFn = toConfigFn;
exports.stripIdentifiers = stripIdentifiers;
exports.sanitize = sanitize;
exports.hoursAsInteger = hoursAsInteger;
exports.formatResults = formatResults;
exports.recordsSorter = recordsSorter;
exports.clearTenantFlags = clearTenantFlags;
exports.ensureProp = ensureProp;
exports.clearClientArrays = clearClientArrays;
exports.convertClientIdToName = convertClientIdToName;
exports.mapClientID2NameSorted = mapClientID2NameSorted;

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _sanitizeFilename = require("sanitize-filename");

var _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);

var _dotProp = require("dot-prop");

var _dotProp2 = _interopRequireDefault(_dotProp);

var _tools = require("./tools");

var _logger = require("./logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isDirectory(f) {
  try {
    return _fsExtra2.default.statSync(_path2.default.resolve(f)).isDirectory();
  } catch (err) {
    return false;
  }
}

function isFile(f) {
  try {
    return _fsExtra2.default.statSync(_path2.default.resolve(f)).isFile();
  } catch (err) {
    return false;
  }
}

function getFiles(folder, exts) {
  if (isDirectory(folder)) {
    return _fsExtra2.default.readdirSync(folder).map(f => _path2.default.join(folder, f)).filter(f => isFile(f) && exts.includes(_path2.default.extname(f)));
  }

  return [];
}

function loadJSON(file, mappings) {
  try {
    const content = (0, _tools.loadFile)(file, mappings);
    return JSON.parse(content);
  } catch (e) {
    throw new Error(`Error parsing JSON from metadata file: ${file}, because: ${e.message}`);
  }
}

function dumpJSON(file, mappings) {
  try {
    _logger2.default.info(`Writing ${file}`);

    const jsonBody = JSON.stringify(mappings, null, 2);

    _fsExtra2.default.writeFileSync(file, jsonBody.endsWith('\n') ? jsonBody : `${jsonBody}\n`);
  } catch (e) {
    throw new Error(`Error writing JSON to metadata file: ${file}, because: ${e.message}`);
  }
}

function existsMustBeDir(folder) {
  if (_fsExtra2.default.existsSync(folder)) {
    if (!isDirectory(folder)) {
      throw new Error(`Expected ${folder} to be a folder but got a file?`);
    }

    return true;
  }

  return false;
}

function toConfigFn(data) {
  return key => data[key];
}

function stripIdentifiers(auth0, assets) {
  const updated = { ...assets
  };
  const ignore = ['actions', 'rulesConfigs', 'emailTemplates', 'guardianFactors', 'guardianFactorProviders', 'guardianFactorTemplates'];
  auth0.handlers.forEach(h => {
    if (ignore.includes(h.type)) return;
    const exist = updated[h.type];

    if (Array.isArray(exist)) {
      updated[h.type] = exist.map(o => {
        const newObj = { ...o
        };
        delete newObj[h.id];
        return newObj;
      });
    }
  });
  return updated;
}

function sanitize(str) {
  return (0, _sanitizeFilename2.default)(str, {
    replacement: '-'
  });
}

function hoursAsInteger(property, hours) {
  if (Number.isInteger(hours)) return {
    [property]: hours
  };
  return {
    [`${property}_in_minutes`]: Math.round(hours * 60)
  };
}

function formatResults(item) {
  if (typeof item !== 'object') {
    return item;
  }

  const importantFields = {
    name: null,
    client_id: null,
    audience: null,
    template: null,
    identifier: null,
    strategy: null,
    script: null,
    stage: null,
    id: null
  };
  const result = { ...importantFields
  };
  Object.entries(item).sort().forEach(([key, value]) => {
    result[key] = value;
  });
  Object.keys(importantFields).forEach(key => {
    if (result[key] === null) delete result[key];
  });
  return result;
}

function recordsSorter(a, b) {
  const importantFields = ['name', 'key', 'client_id', 'template'];

  for (let i = 0; i < importantFields.length; i += 1) {
    const key = importantFields[i];

    if (a[key] && b[key]) {
      return a[key] > b[key] ? 1 : -1;
    }
  }

  return 0;
}

function clearTenantFlags(tenant) {
  if (tenant.flags && !Object.keys(tenant.flags).length) {
    delete tenant.flags;
  }
}

function ensureProp(obj, props, value = '') {
  if (!_dotProp2.default.has(obj, props)) {
    _dotProp2.default.set(obj, props, value);
  }
}

function clearClientArrays(client) {
  const propsToClear = ['allowed_clients', 'allowed_logout_urls', 'allowed_origins', 'callbacks'];
  Object.keys(client).forEach(prop => {
    if (propsToClear.indexOf(prop) >= 0 && !client[prop]) {
      client[prop] = [];
    }
  });
  return client;
}

function convertClientIdToName(clientId, knownClients = []) {
  try {
    const found = knownClients.find(c => c.client_id === clientId);
    return found && found.name || clientId;
  } catch (e) {
    return clientId;
  }
}

function mapClientID2NameSorted(enabledClients, knownClients) {
  return [...(enabledClients || []).map(clientId => convertClientIdToName(clientId, knownClients))].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
}