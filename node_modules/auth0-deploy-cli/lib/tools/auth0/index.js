"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ajv = require("ajv/lib/ajv");

var _ajv2 = _interopRequireDefault(_ajv);

var _client = require("./client");

var _client2 = _interopRequireDefault(_client);

var _schema = require("./schema");

var _schema2 = _interopRequireDefault(_schema);

var _handlers = require("./handlers");

var handlers = _interopRequireWildcard(_handlers);

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultOrder = 50;

function sortByOrder(toSort, stage) {
  const sorted = [...toSort];
  sorted.sort((a, b) => {
    const aOrder = a[stage].order || defaultOrder;
    const bOrder = b[stage].order || defaultOrder;
    return aOrder - bOrder;
  });
  return sorted;
}

class Auth0 {
  constructor(client, assets, config) {
    this.client = (0, _client2.default)(client);
    this.config = config;
    this.assets = assets;
    this.handlers = [];
    Object.values(handlers).forEach(h => {
      const handler = new h.default({
        client: this.client,
        config
      });
      this.handlers.push(handler);
    });
  }

  async runStage(stage) {
    for (const handler of sortByOrder(this.handlers, stage)) {
      try {
        const stageFn = Object.getPrototypeOf(handler)[stage];
        this.assets = { ...this.assets,
          ...((await stageFn.apply(handler, [this.assets])) || {})
        };
      } catch (err) {
        err.type = handler.type;
        err.stage = stage;
        throw err;
      }
    }
  }

  async validate() {
    const ajv = new _ajv2.default({
      useDefaults: true
    });
    const valid = ajv.validate(_schema2.default, this.assets);

    if (!valid) {
      throw new Error(`Schema validation failed loading ${JSON.stringify(ajv.errors, null, 4)}`);
    }

    await this.runStage('validate');
  }

  async loadAll() {
    await this.runStage('load');
  }

  async processChanges() {
    await this.runStage('processChanges');
  }

}

exports.default = Auth0;