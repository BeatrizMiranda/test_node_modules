"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pagedClient;

var _promisePoolExecutor = require("promise-pool-executor");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const API_CONCURRENCY = 3;
const API_FREQUENCY_PER_SECOND = 8;
const MAX_PAGE_SIZE = 100;

function getEntity(rsp) {
  const found = Object.values(rsp).filter(a => Array.isArray(a));

  if (found.length === 1) {
    return found[0];
  }

  throw new Error('There was an error trying to find the entity within paginate');
}

function pagedManager(client, manager) {
  return new Proxy(manager, {
    get: function (target, name, receiver) {
      if (name === 'getAll') {
        return async function (...args) {
          if (args[0] && typeof args[0] === 'object' && args[0].paginate) {
            const fnName = name;
            const data = [];
            const newArgs = [...args];
            newArgs[0] = { ...newArgs[0],
              page: 0
            };
            const perPage = newArgs[0].per_page || MAX_PAGE_SIZE;
            newArgs[0].per_page = perPage;
            delete newArgs[0].paginate;
            const rsp = await client.pool.addSingleTask({
              data: _lodash2.default.cloneDeep(newArgs),
              generator: pageArgs => target[fnName](...pageArgs)
            }).promise();
            data.push(...getEntity(rsp));
            const total = rsp.total || 0;
            const pagesLeft = Math.ceil(total / perPage) - 1;

            if (pagesLeft > 0) {
              const pages = await client.pool.addEachTask({
                data: Array.from(Array(pagesLeft).keys()),
                generator: page => {
                  const pageArgs = _lodash2.default.cloneDeep(newArgs);

                  pageArgs[0].page = page + 1;
                  return target[fnName](...pageArgs).then(r => getEntity(r));
                }
              }).promise();
              data.push(...(0, _utils.flatten)(pages));

              if (data.length !== total) {
                throw new Error('Fail to load data from tenant');
              }
            }

            return data;
          }

          return target[name](...args);
        };
      }

      const nestedManager = Reflect.get(target, name, receiver);

      if (typeof nestedManager === 'object' && nestedManager !== null) {
        return pagedManager(client, nestedManager);
      }

      return nestedManager;
    }
  });
}

function pagedClient(client) {
  client.pool = new _promisePoolExecutor.PromisePoolExecutor({
    concurrencyLimit: API_CONCURRENCY,
    frequencyLimit: API_FREQUENCY_PER_SECOND,
    frequencyWindow: 1000
  });
  return pagedManager(client, client);
}