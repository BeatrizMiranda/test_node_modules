"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.schema = undefined;

var _dec, _class;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _logger = require("../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const schema = exports.schema = {
  type: 'object',
  additionalProperties: {
    type: 'boolean'
  }
};
let MigrationsHandler = (_dec = (0, _default.order)('150'), (_class = class MigrationsHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'migrations'
    });
  }

  async getType() {
    try {
      const migrations = await this.client.migrations.getMigrations();
      return migrations.flags;
    } catch (err) {
      if (err.statusCode === 404) return {};
      throw err;
    }
  }

  async processChanges(assets) {
    const {
      migrations
    } = assets;

    if (migrations && Object.keys(migrations).length > 0) {
      const flags = await this.removeUnavailableMigrations(migrations);

      if (Object.keys(flags).length > 0) {
        await this.client.migrations.updateMigrations({
          flags
        });
        this.updated += 1;
        this.didUpdate(flags);
      }
    }
  }

  logUnavailableMigrations(ignoreUnavailableMigrations, ignoredMigrations) {
    if (ignoreUnavailableMigrations) {
      _logger2.default.info(`The following migrations are not available '${ignoredMigrations.join(',')}'. The migrations will be ignored because you have AUTH0_IGNORE_UNAVAILABLE_MIGRATIONS=true in your configuration.`);
    } else {
      _logger2.default.warn(`The following disabled migrations are not available '${ignoredMigrations.join(',')}'. The migrations will be ignored, remove the migrations to avoid future warnings.`);
    }
  }

  async removeUnavailableMigrations(migrations) {
    const flags = { ...migrations
    };
    const ignoreUnavailableMigrations = !!this.config('AUTH0_IGNORE_UNAVAILABLE_MIGRATIONS');
    const existingMigrations = await this.getType();
    const unavailableMigrations = Object.keys(flags).filter(flag => !(flag in existingMigrations));
    const ignoredMigrations = unavailableMigrations.filter(flag => ignoreUnavailableMigrations || flags[flag] === false);

    if (ignoredMigrations.length > 0) {
      this.logUnavailableMigrations(ignoreUnavailableMigrations, ignoredMigrations);
      ignoredMigrations.forEach(flag => delete flags[flag]);
    }

    return flags;
  }

}, (_applyDecoratedDescriptor(_class.prototype, "processChanges", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "processChanges"), _class.prototype)), _class));
exports.default = MigrationsHandler;