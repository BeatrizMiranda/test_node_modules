"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _constants = require("../../constants");

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const schema = exports.schema = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        enum: _constants2.default.GUARDIAN_FACTOR_TEMPLATES
      }
    },
    required: ['name']
  }
};

class GuardianFactorTemplatesHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'guardianFactorTemplates',
      id: 'name'
    });
  }

  async getType() {
    if (this.existing) return this.existing;
    const data = await Promise.all(_constants2.default.GUARDIAN_FACTOR_TEMPLATES.map(async name => {
      const templates = await this.client.guardian.getFactorTemplates({
        name
      });
      return {
        name,
        ...templates
      };
    }));
    return data.filter(d => Object.keys(d).length > 1);
  }

  async processChanges(assets) {
    const {
      guardianFactorTemplates
    } = assets;
    if (!guardianFactorTemplates || !guardianFactorTemplates.length) return;
    await Promise.all(guardianFactorTemplates.map(async fatorTemplates => {
      const data = { ...fatorTemplates
      };
      const params = {
        name: fatorTemplates.name
      };
      delete data.name;
      await this.client.guardian.updateFactorTemplates(params, data);
      this.didUpdate(params);
      this.updated += 1;
    }));
  }

}

exports.default = GuardianFactorTemplatesHandler;