"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.schema = undefined;

var _dec, _class;

var _ValidationError = require("../../ValidationError");

var _ValidationError2 = _interopRequireDefault(_ValidationError);

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _pages = require("./pages");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const schema = exports.schema = {
  type: 'object'
};
const blockPageKeys = [...Object.keys(_pages.pageNameMap), ...Object.values(_pages.pageNameMap), ..._pages.supportedPages];
let TenantHandler = (_dec = (0, _default.order)('100'), (_class = class TenantHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'tenant'
    });
  }

  async getType() {
    const tenant = await this.client.tenant.getSettings();
    blockPageKeys.forEach(key => {
      if (tenant[key]) delete tenant[key];
    });
    return tenant;
  }

  async validate(assets) {
    const {
      tenant
    } = assets;
    if (!tenant) return;
    const pageKeys = Object.keys(tenant).filter(k => blockPageKeys.includes(k));

    if (pageKeys.length > 0) {
      throw new _ValidationError2.default(`The following pages ${(0, _utils.dumpJSON)(pageKeys)} were found in tenant settings. Pages should be set separately. Please refer to the documentation.`);
    }
  }

  async processChanges(assets) {
    const {
      tenant
    } = assets;

    if (tenant && Object.keys(tenant).length > 0) {
      await this.client.tenant.updateSettings(tenant);
      this.updated += 1;
      this.didUpdate(tenant);
    }
  }

}, (_applyDecoratedDescriptor(_class.prototype, "processChanges", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "processChanges"), _class.prototype)), _class));
exports.default = TenantHandler;