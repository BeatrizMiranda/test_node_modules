"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = exports.excludeSchema = undefined;

var _ValidationError = require("../../ValidationError");

var _ValidationError2 = _interopRequireDefault(_ValidationError);

var _constants = require("../../constants");

var _constants2 = _interopRequireDefault(_constants);

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const excludeSchema = exports.excludeSchema = {
  type: 'array',
  items: {
    type: 'string'
  }
};
const schema = exports.schema = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      name: {
        type: 'string'
      },
      identifier: {
        type: 'string'
      },
      scopes: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            name: {
              type: 'string'
            },
            description: {
              type: 'string'
            }
          }
        }
      },
      enforce_policies: {
        type: 'boolean'
      },
      token_dialect: {
        type: 'string'
      }
    },
    required: ['name', 'identifier']
  }
};

class ResourceServersHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'resourceServers',
      stripUpdateFields: ['identifier']
    });
  }

  objString(resourceServer) {
    return super.objString({
      name: resourceServer.name,
      identifier: resourceServer.identifier
    });
  }

  async getType() {
    if (this.existing) return this.existing;
    const resourceServers = await this.client.resourceServers.getAll({
      paginate: true,
      include_totals: true
    });
    return resourceServers.filter(rs => rs.name !== _constants2.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME);
  }

  async calcChanges(assets) {
    let {
      resourceServers
    } = assets;
    if (!resourceServers) return {};
    const excluded = assets.exclude && assets.exclude.resourceServers || [];
    let existing = await this.getType();
    resourceServers = resourceServers.filter(r => !excluded.includes(r.name));
    existing = existing.filter(r => !excluded.includes(r.name));
    return (0, _utils.calcChanges)(this, resourceServers, existing, ['id', 'identifier']);
  }

  async validate(assets) {
    const {
      resourceServers
    } = assets;
    if (!resourceServers) return;
    const mgmtAPIResource = resourceServers.find(r => r.name === _constants2.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME);

    if (mgmtAPIResource) {
      throw new _ValidationError2.default(`You can not configure the '${_constants2.default.RESOURCE_SERVERS_MANAGEMENT_API_NAME}'.`);
    }

    await super.validate(assets);
  }

}

exports.default = ResourceServersHandler;