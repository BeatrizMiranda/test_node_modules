"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.schema = undefined;

var _dec, _class;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _constants = require("../../constants");

var _constants2 = _interopRequireDefault(_constants);

var _logger = require("../../logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const schema = exports.schema = {
  type: 'object',
  items: {
    type: 'object',
    additionalProperties: true,
    properties: {
      trigger_id: {
        type: 'object',
        properties: {
          action_name: {
            type: 'string',
            enum: _constants2.default.ACTIONS_TRIGGERS
          },
          display_name: {
            type: 'string',
            default: ''
          }
        }
      }
    }
  }
};

function isActionsDisabled(err) {
  const errorBody = _lodash2.default.get(err, 'originalError.response.body') || {};
  return err.statusCode === 403 && errorBody.errorCode === 'feature_not_enabled';
}

let TriggersHandler = (_dec = (0, _default.order)('80'), (_class = class TriggersHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'triggers',
      id: 'name'
    });
  }

  async getType() {
    if (this.existing) {
      return this.existing;
    }

    if (!this.client.actions || typeof this.client.actions.getAllTriggers !== 'function') {
      return [];
    }

    const triggerBindings = {};

    try {
      const res = await this.client.actions.getAllTriggers();
      const triggers = (0, _lodash2.default)(res.triggers).map('id').uniq().value();

      for (let i = 0; i < triggers.length; i++) {
        const triggerId = triggers[i];
        const {
          bindings
        } = await this.client.actions.getTriggerBindings({
          trigger_id: triggerId
        });

        if (bindings.length > 0) {
          triggerBindings[triggerId] = bindings.map(binding => ({
            action_name: binding.action.name,
            display_name: binding.display_name
          }));
        }
      }

      this.existing = triggerBindings;
      return this.existing;
    } catch (err) {
      if (err.statusCode === 404 || err.statusCode === 501) {
        return [];
      }

      if (isActionsDisabled(err)) {
        _logger2.default.info('Skipping triggers because Actions is not enabled.');

        return {};
      }

      throw err;
    }
  }

  async processChanges(assets) {
    const {
      triggers
    } = assets;
    if (!triggers) return;
    await Promise.all(Object.entries(triggers).map(async ([name, data]) => {
      const bindings = data.map(binding => ({
        ref: {
          type: 'action_name',
          value: binding.action_name
        },
        display_name: binding.display_name
      }));
      await this.client.actions.updateTriggerBindings({
        trigger_id: name
      }, {
        bindings
      });
      this.didUpdate({
        trigger_id: name
      });
      this.updated += 1;
    }));
  }

}, (_applyDecoratedDescriptor(_class.prototype, "processChanges", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "processChanges"), _class.prototype)), _class));
exports.default = TriggersHandler;