"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.schema = exports.supportedTemplates = undefined;

var _dec, _class;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _constants = require("../../constants");

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const supportedTemplates = exports.supportedTemplates = _constants2.default.EMAIL_TEMPLATES_NAMES.filter(p => p.includes('.json')).map(p => p.replace('.json', ''));

const schema = exports.schema = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      template: {
        type: 'string',
        enum: supportedTemplates
      },
      body: {
        type: 'string',
        default: ''
      }
    },
    required: ['template']
  }
};
let EmailTemplateHandler = (_dec = (0, _default.order)('60'), (_class = class EmailTemplateHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'emailTemplates',
      id: 'template'
    });
  }

  async getType() {
    const emailTemplates = [];
    await Promise.all(_constants2.default.EMAIL_TEMPLATES_TYPES.map(async name => {
      try {
        const template = await this.client.emailTemplates.get({
          name
        });
        emailTemplates.push(template);
      } catch (err) {
        if (err.statusCode !== 404) {
          throw err;
        }
      }
    }));
    return emailTemplates;
  }

  async updateOrCreate(emailTemplate) {
    try {
      const params = {
        name: emailTemplate[this.id]
      };
      const updated = await this.client.emailTemplates.update(params, emailTemplate);
      delete updated.body;
      this.didUpdate(updated);
      this.updated += 1;
    } catch (err) {
      if (err.statusCode === 404) {
        const created = await this.client.emailTemplates.create(emailTemplate);
        delete created.body;
        this.didCreate(created);
        this.created += 1;
      } else {
        throw err;
      }
    }
  }

  async processChanges(assets) {
    const {
      emailTemplates
    } = assets;
    if (!emailTemplates || !emailTemplates.length) return;
    await Promise.all(emailTemplates.map(async emailTemplate => {
      await this.updateOrCreate(emailTemplate);
    }));
  }

}, (_applyDecoratedDescriptor(_class.prototype, "processChanges", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "processChanges"), _class.prototype)), _class));
exports.default = EmailTemplateHandler;