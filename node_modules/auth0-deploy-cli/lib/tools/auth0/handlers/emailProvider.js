"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const schema = exports.schema = {
  type: 'object'
};
const defaultFields = ['name', 'enabled', 'credentials', 'settings', 'default_from_address'];

class EmailProviderHandler extends _default2.default {
  constructor(options) {
    super({ ...options,
      type: 'emailProvider'
    });
  }

  async getType() {
    try {
      return await this.client.emailProvider.get({
        include_fields: true,
        fields: defaultFields
      });
    } catch (err) {
      if (err.statusCode === 404) return {};
      throw err;
    }
  }

  objString(provider) {
    return super.objString({
      name: provider.name,
      enabled: provider.enabled
    });
  }

  async processChanges(assets) {
    const {
      emailProvider
    } = assets;
    if (!emailProvider) return;

    if (Object.keys(emailProvider).length > 0) {
      let existing = await this.getType();

      if (existing.name) {
        if (existing.name !== emailProvider.name) {
          await this.client.emailProvider.delete();
          this.didDelete(existing);
          existing = {};
        }
      }

      if (existing.name) {
        const provider = {
          name: emailProvider.name,
          enabled: emailProvider.enabled
        };
        const updated = await this.client.emailProvider.update(provider, emailProvider);
        this.updated += 1;
        this.didUpdate(updated);
      } else {
        const provider = {
          name: emailProvider.name,
          enabled: emailProvider.enabled
        };
        const created = await this.client.emailProvider.configure(provider, emailProvider);
        this.created += 1;
        this.didCreate(created);
      }
    }
  }

}

exports.default = EmailProviderHandler;