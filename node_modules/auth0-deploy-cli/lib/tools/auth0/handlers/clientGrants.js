"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.schema = undefined;

var _dec, _class;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const schema = exports.schema = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      client_id: {
        type: 'string'
      },
      audience: {
        type: 'string'
      },
      scope: {
        type: 'array',
        items: {
          type: 'string'
        },
        uniqueItems: true
      }
    },
    required: ['client_id', 'scope', 'audience']
  }
};
let ClientHandler = (_dec = (0, _default.order)('60'), (_class = class ClientHandler extends _default2.default {
  constructor(config) {
    super({ ...config,
      type: 'clientGrants',
      id: 'id',
      identifiers: ['id', ['client_id', 'audience']],
      stripUpdateFields: ['audience', 'client_id']
    });
  }

  objString(item) {
    return super.objString({
      id: item.id,
      client_id: item.client_id,
      audience: item.audience
    });
  }

  async getType() {
    if (this.existing) {
      return this.existing;
    }

    this.existing = await this.client.clientGrants.getAll({
      paginate: true,
      include_totals: true
    });
    const currentClient = this.config('AUTH0_CLIENT_ID');
    this.existing = this.existing.filter(grant => grant.client_id !== currentClient);
    return this.existing;
  }

  async processChanges(assets) {
    const {
      clientGrants
    } = assets;
    if (!clientGrants) return;
    const clients = await this.client.clients.getAll({
      paginate: true,
      include_totals: true
    });
    const excludedClientsByNames = assets.exclude && assets.exclude.clients || [];
    const excludedClients = (0, _utils.convertClientNamesToIds)(excludedClientsByNames, clients);
    const formatted = assets.clientGrants.map(clientGrant => {
      const grant = { ...clientGrant
      };
      const found = clients.find(c => c.name === grant.client_id);
      if (found) grant.client_id = found.client_id;
      return grant;
    });
    const currentClient = this.config('AUTH0_CLIENT_ID');
    const {
      del,
      update,
      create,
      conflicts
    } = await this.calcChanges({ ...assets,
      clientGrants: formatted
    });

    const filterGrants = list => {
      if (excludedClients.length) {
        return list.filter(item => item.client_id !== currentClient && ![...excludedClientsByNames, ...excludedClients].includes(item.client_id));
      }

      return list.filter(item => item.client_id !== currentClient);
    };

    const changes = {
      del: filterGrants(del),
      update: filterGrants(update),
      create: filterGrants(create),
      conflicts: filterGrants(conflicts)
    };
    await super.processChanges(assets, { ...changes
    });
  }

}, (_applyDecoratedDescriptor(_class.prototype, "processChanges", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "processChanges"), _class.prototype)), _class));
exports.default = ClientHandler;