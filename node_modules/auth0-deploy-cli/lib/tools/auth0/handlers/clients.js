"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _default = require("./default");

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const schema = exports.schema = {
  type: 'array',
  items: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        minLength: 1,
        pattern: '[^<>]+'
      }
    },
    required: ['name']
  }
};

class ClientHandler extends _default2.default {
  constructor(config) {
    super({ ...config,
      type: 'clients',
      id: 'client_id',
      identifiers: ['client_id', 'name'],
      objectFields: ['client_metadata'],
      stripUpdateFields: ['callback_url_template', 'signing_keys', 'global', 'tenant', 'jwt_configuration.secret_encoded']
    });
  }

  objString(item) {
    return super.objString({
      name: item.name,
      client_id: item.client_id
    });
  }

  async processChanges(assets) {
    const {
      clients
    } = assets;
    if (!clients) return;
    const excludedClients = assets.exclude && assets.exclude.clients || [];
    const {
      del,
      update,
      create,
      conflicts
    } = await this.calcChanges(assets);
    const currentClient = this.config('AUTH0_CLIENT_ID');

    const filterClients = list => {
      if (excludedClients.length) {
        return list.filter(item => item.client_id !== currentClient && !excludedClients.includes(item.name));
      }

      return list.filter(item => item.client_id !== currentClient);
    };

    const changes = {
      del: filterClients(del),
      update: filterClients(update),
      create: filterClients(create),
      conflicts: filterClients(conflicts)
    };
    await super.processChanges(assets, { ...changes
    });
  }

  async getType() {
    if (this.existing) {
      return this.existing;
    }

    this.existing = await this.client.clients.getAll({
      paginate: true,
      include_totals: true,
      is_global: false
    });
    return this.existing;
  }

}

exports.default = ClientHandler;