"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadSarifReportCommand = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const glob_1 = __importDefault(require("glob"));
const concurrency_1 = require("../../helpers/concurrency");
const retry_1 = require("../../helpers/retry");
const tags_1 = require("../../helpers/tags");
const utils_1 = require("../../helpers/utils");
const validation = __importStar(require("../../helpers/validation"));
const api_1 = require("./api");
const sarif_schema_2_1_0_json_1 = __importDefault(require("./json-schema/sarif-schema-2.1.0.json"));
const renderer_1 = require("./renderer");
const utils_2 = require("./utils");
const errorCodesStopUpload = [400, 403];
const validateSarif = (sarifReportPath) => {
    const ajv = new ajv_1.default({ allErrors: true });
    (0, ajv_formats_1.default)(ajv);
    const sarifJsonSchemaValidate = ajv.compile(sarif_schema_2_1_0_json_1.default);
    try {
        const sarifReportContent = JSON.parse(String(fs_1.default.readFileSync(sarifReportPath)));
        const valid = sarifJsonSchemaValidate(sarifReportContent);
        if (!valid) {
            const errors = sarifJsonSchemaValidate.errors || [];
            const errorMessages = errors.map((error) => {
                return `${error.instancePath}: ${error.message}`;
            });
            return errorMessages.join('\n');
        }
    }
    catch (error) {
        return error.message;
    }
    return undefined;
};
class UploadSarifReportCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.basePaths = clipanion_1.Option.Rest({ required: 1 });
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.env = clipanion_1.Option.String('--env');
        this.maxConcurrency = clipanion_1.Option.String('--max-concurrency', '20', { validator: validation.isInteger() });
        this.service = clipanion_1.Option.String('--service');
        this.tags = clipanion_1.Option.Array('--tags');
        this.noVerify = clipanion_1.Option.Boolean('--no-verify', false);
        this.config = {
            apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
            env: process.env.DD_ENV,
            envVarTags: process.env.DD_TAGS,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.service) {
                this.service = process.env.DD_SERVICE;
            }
            if (!this.service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            if (!this.basePaths || !this.basePaths.length) {
                this.context.stderr.write('Missing basePath\n');
                return 1;
            }
            if (!this.config.env) {
                this.config.env = this.env;
            }
            const api = this.getApiHelper();
            // Normalizing the basePath to resolve .. and .
            // Always using the posix version to avoid \ on Windows.
            this.basePaths = this.basePaths.map((basePath) => path_1.default.posix.normalize(basePath));
            const spanTags = yield (0, tags_1.getSpanTags)(this.config, this.tags);
            const payloads = yield this.getMatchingSarifReports(spanTags);
            if (payloads.length === 0) {
                this.context.stdout.write((0, renderer_1.renderFilesNotFound)(this.basePaths, this.service));
                return 1;
            }
            this.context.stdout.write((0, renderer_1.renderCommandInfo)(this.basePaths, this.service, this.maxConcurrency, this.dryRun, this.noVerify));
            const upload = (p) => this.uploadSarifReport(api, p);
            const initialTime = new Date().getTime();
            yield (0, concurrency_1.doWithMaxConcurrency)(this.maxConcurrency, payloads, upload);
            const totalTimeSeconds = (Date.now() - initialTime) / 1000;
            this.context.stdout.write((0, renderer_1.renderSuccessfulCommand)(payloads.length, totalTimeSeconds, spanTags, this.service, this.config.env));
        });
    }
    uploadSarifReport(api, sarifReport) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dryRun) {
                this.context.stdout.write((0, renderer_1.renderDryRunUpload)(sarifReport));
                return;
            }
            try {
                yield (0, retry_1.retryRequest)(() => api.uploadSarifReport(sarifReport, this.context.stdout.write.bind(this.context.stdout)), {
                    onRetry: (e, attempt) => {
                        this.context.stderr.write((0, renderer_1.renderRetriedUpload)(sarifReport, e.message, attempt));
                    },
                    retries: 5,
                });
            }
            catch (error) {
                this.context.stderr.write((0, renderer_1.renderFailedUpload)(sarifReport, error));
                if (error.message) {
                    // If it's an axios error
                    if (!errorCodesStopUpload.includes(error.response.status)) {
                        // And a status code that should not stop the whole upload, just return
                        return;
                    }
                }
                throw error;
            }
        });
    }
    getApiHelper() {
        if (!this.config.apiKey) {
            this.context.stdout.write(`Neither ${chalk_1.default.red.bold('DATADOG_API_KEY')} nor ${chalk_1.default.red.bold('DD_API_KEY')} is in your environment.\n`);
            throw new Error('API key is missing');
        }
        return (0, api_1.apiConstructor)((0, utils_2.getBaseIntakeUrl)(), this.config.apiKey);
    }
    getMatchingSarifReports(spanTags) {
        return __awaiter(this, void 0, void 0, function* () {
            const sarifReports = (this.basePaths || []).reduce((acc, basePath) => {
                const isFile = !!path_1.default.extname(basePath);
                if (isFile) {
                    return acc.concat(fs_1.default.existsSync(basePath) ? [basePath] : []);
                }
                return acc.concat(glob_1.default.sync((0, utils_1.buildPath)(basePath, '*.sarif')));
            }, []);
            const validUniqueFiles = [...new Set(sarifReports)].filter((sarifReport) => {
                if (this.noVerify) {
                    return true;
                }
                const validationErrorMessage = validateSarif(sarifReport);
                if (validationErrorMessage) {
                    this.context.stdout.write((0, renderer_1.renderInvalidFile)(sarifReport, validationErrorMessage));
                    return false;
                }
                return true;
            });
            return validUniqueFiles.map((sarifReport) => ({
                service: this.service,
                reportPath: sarifReport,
                spanTags,
            }));
        });
    }
}
exports.UploadSarifReportCommand = UploadSarifReportCommand;
UploadSarifReportCommand.paths = [['sarif', 'upload']];
UploadSarifReportCommand.usage = clipanion_1.Command.Usage({
    category: 'Static Analysis',
    description: 'Upload SARIF reports files to Datadog.',
    details: `
      This command will upload SARIF reports files to Datadog.\n
      See README for details.
    `,
    examples: [
        ['Upload all SARIF report files in current directory', 'datadog-ci sarif upload --service my-service .'],
        [
            'Upload all SARIF report files in src/sarif-go-reports and src/sarif-java-reports',
            'datadog-ci sarif upload --service my-service src/sarif-go-reports src/sarif-java-reports',
        ],
        [
            'Upload all SARIF report files in current directory and add extra tags globally',
            'datadog-ci sarif upload --service my-service --tags key1:value1 --tags key2:value2 .',
        ],
        [
            'Upload all SARIF report files in current directory to the datadoghq.eu site',
            'DATADOG_SITE=datadoghq.eu datadog-ci sarif upload --service my-service .',
        ],
    ],
});
//# sourceMappingURL=upload.js.map