"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePayload = void 0;
const console = __importStar(require("console"));
const crypto_1 = __importDefault(require("crypto"));
const tags_1 = require("../../helpers/tags");
const language_1 = require("./language");
const license_1 = require("./license");
// Generate the payload we send to the API
// jsonContent is the SBOM file content read from disk
// tags are the list of tags we retrieved
const generatePayload = (jsonContent, tags, service, env) => {
    if (!tags[tags_1.GIT_COMMIT_AUTHOR_EMAIL] ||
        !tags[tags_1.GIT_COMMIT_AUTHOR_NAME] ||
        !tags[tags_1.GIT_SHA] ||
        !tags[tags_1.GIT_BRANCH] ||
        !tags[tags_1.GIT_REPOSITORY_URL]) {
        return undefined;
    }
    const dependencies = [];
    if (jsonContent) {
        if (jsonContent['components']) {
            for (const component of jsonContent['components']) {
                if (!component['type'] || !component['name'] || !component['version']) {
                    continue;
                }
                if (component['type'] !== 'library') {
                    continue;
                }
                const lang = (0, language_1.getLanguageFromComponent)(component);
                if (!lang) {
                    continue;
                }
                const purl = component['purl'];
                if (!purl) {
                    console.error(`cannot find purl for component ${component['name']}`);
                    continue;
                }
                const dependency = {
                    name: component['name'],
                    version: component['version'],
                    language: lang,
                    licenses: (0, license_1.getLicensesFromComponent)(component),
                    purl,
                };
                dependencies.push(dependency);
            }
        }
    }
    return {
        id: crypto_1.default.randomUUID(),
        commit: {
            author_name: tags[tags_1.GIT_COMMIT_AUTHOR_NAME],
            author_email: tags[tags_1.GIT_COMMIT_AUTHOR_EMAIL],
            sha: tags[tags_1.GIT_SHA],
            branch: tags[tags_1.GIT_BRANCH],
        },
        repository: {
            url: tags[tags_1.GIT_REPOSITORY_URL],
        },
        tags,
        dependencies,
        service,
        env,
    };
};
exports.generatePayload = generatePayload;
//# sourceMappingURL=payload.js.map