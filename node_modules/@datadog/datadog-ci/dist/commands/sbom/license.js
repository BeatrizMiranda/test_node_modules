"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLicensesFromComponent = exports.getLicensesFromString = void 0;
const types_1 = require("./types");
// Get the license from a string. If the license is valid, we return it. Otherwise, we return undefined
// List of licenses: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository
const getLicenseFromString = (s) => {
    if (!s) {
        return undefined;
    }
    switch (s.toLowerCase()) {
        case '0bsd':
            return types_1.DependencyLicense.ZEROBSD;
        case 'apache-2.0':
        case 'apache license, version 2.0':
        case 'the apache software license, version 2.0':
            return types_1.DependencyLicense.APACHE2;
        case 'bsd-2-clause':
            return types_1.DependencyLicense.BSD2CLAUSE;
        case 'bsd-3-clause':
            return types_1.DependencyLicense.BSD3CLAUSE;
        case 'bsl-1.0':
            return types_1.DependencyLicense.BSL1;
        case 'gpl v2':
            return types_1.DependencyLicense.GPL2_0;
        case 'gpl v3':
            return types_1.DependencyLicense.GPL3_0;
        case 'isc':
            return types_1.DependencyLicense.ISC;
        case 'mit':
        case 'the mit license':
            return types_1.DependencyLicense.MIT;
        case 'unlicense':
            return types_1.DependencyLicense.UNLICENSE;
        case 'zlib':
            return types_1.DependencyLicense.ZLIB;
    }
    console.debug(`license ${s} not recognized`);
    return undefined;
};
// Get all the licenses from a string. Sometimes, there are two licenses in one string
// such as "MIT OR Apache-2.0". In this case, we return all the licenses in this condition.
const getLicensesFromString = (s) => {
    if (!s) {
        return [];
    }
    const licenses = [];
    if (s.toLowerCase().includes('or')) {
        for (const lic of s.toLowerCase().split(' or ')) {
            const l = getLicenseFromString(lic.trim());
            if (l) {
                licenses.push(l);
            }
        }
    }
    else {
        const lic = getLicenseFromString(s);
        if (lic) {
            licenses.push(lic);
        }
    }
    return licenses;
};
exports.getLicensesFromString = getLicensesFromString;
// Get all the licenses of this component. We extract the "licenses" element from the SBOM component.
// Unfortunately, depending on the SBOM generator, the licenses are generated in a different manner.
// We attempt to get as much as possible.
const getLicensesFromComponent = (component) => {
    var _a;
    const elementsForLicense = ['id', 'name'];
    const componentName = component['name'];
    const licensesSet = new Set();
    // Get the "licenses" attribute of the SBOM component.
    if (component['licenses']) {
        for (const license of component['licenses']) {
            for (const el of elementsForLicense) {
                // Handle "license": [ {"license": {"id": <license>}} ]
                if ((_a = license['license']) === null || _a === void 0 ? void 0 : _a[el]) {
                    for (const l of (0, exports.getLicensesFromString)(license['license'][el])) {
                        licensesSet.add(l);
                    }
                }
            }
            // Handle "license": [ {"expression": "MIT"} ]
            if (license['expression']) {
                for (const l of (0, exports.getLicensesFromString)(license['expression'])) {
                    licensesSet.add(l);
                }
            }
        }
    }
    if (licensesSet.size === 0) {
        console.log(`license for component ${componentName} not found`);
    }
    return Array.from(licensesSet);
};
exports.getLicensesFromComponent = getLicensesFromComponent;
//# sourceMappingURL=license.js.map