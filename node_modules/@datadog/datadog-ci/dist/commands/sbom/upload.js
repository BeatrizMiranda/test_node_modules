"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadSbomCommand = void 0;
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const tags_1 = require("../../helpers/tags");
const api_1 = require("./api");
const payload_1 = require("./payload");
const validation_1 = require("./validation");
class UploadSbomCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.basePaths = clipanion_1.Option.Rest({ required: 1 });
        this.service = clipanion_1.Option.String('--service');
        this.env = clipanion_1.Option.String('--env');
        this.tags = clipanion_1.Option.Array('--tags');
        this.debug = clipanion_1.Option.Boolean('--debug');
        this.config = {
            apiKey: process_1.default.env.DATADOG_API_KEY || process_1.default.env.DD_API_KEY,
            appKey: process_1.default.env.DATADOG_APP_KEY || process_1.default.env.DD_APP_KEY || '',
            env: process_1.default.env.DD_ENV,
            envVarTags: process_1.default.env.DD_TAGS,
        };
    }
    /**
     * Execute the command, which means parse the SBOM file, ensure they are
     * compliant with their schema and upload them to datadog.
     */
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            const service = this.service || process_1.default.env.DD_SERVICE;
            if (!service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            const environment = this.env || this.config.env;
            this.config.env = environment;
            if (!environment) {
                this.context.stderr.write('Missing env\n');
                return 1;
            }
            if (!this.basePaths || !this.basePaths.length) {
                this.context.stderr.write('Missing basePath\n');
                return 1;
            }
            if (!this.config.apiKey) {
                this.context.stderr.write('API key not defined\n');
                return 1;
            }
            // Get the API helper to send the payload
            const api = (0, api_1.getApiHelper)(this.config.apiKey, this.config.appKey);
            const tags = yield (0, tags_1.getSpanTags)(this.config, this.tags);
            const validator = (0, validation_1.getValidator)();
            for (const basePath of this.basePaths) {
                if (this.debug) {
                    this.context.stdout.write(`Processing file ${basePath}\n`);
                }
                if (!(0, validation_1.validateSbomFile)(basePath, validator, !!this.debug)) {
                    this.context.stdout.write(`File ${chalk_1.default.red.bold(basePath)} is not a valid SBOM file.\n`);
                    return 1;
                }
                const filePath = basePath;
                const jsonContent = JSON.parse(fs_1.default.readFileSync(basePath).toString('utf8'));
                // Upload content
                try {
                    const scaPayload = (0, payload_1.generatePayload)(jsonContent, tags, service, environment);
                    if (!scaPayload) {
                        console.log(`Cannot generate payload for file ${filePath}`);
                        continue;
                    }
                    const startTimeMs = Date.now();
                    const response = yield api(scaPayload);
                    const endTimeMs = Date.now();
                    if (this.debug) {
                        this.context.stdout.write(`Upload done, status: ${response.status}\n`);
                    }
                    const apiTimeMs = endTimeMs - startTimeMs;
                    this.context.stdout.write(`File ${basePath} successfully uploaded in ${apiTimeMs} ms\n`);
                }
                catch (error) {
                    process_1.default.stderr.write(`Error while writing the payload: ${error.message}\n`);
                    if (error.response) {
                        process_1.default.stderr.write(`API status: ${error.response.status}\n`);
                    }
                    return 1;
                }
            }
            this.context.stdout.write('Upload finished\n');
            return 0;
        });
    }
}
exports.UploadSbomCommand = UploadSbomCommand;
UploadSbomCommand.paths = [['sbom', 'upload']];
UploadSbomCommand.usage = clipanion_1.Command.Usage({
    description: 'Upload SBOM files to Datadog.',
    details: `
      This command uploads SBOM files to Datadog for dependency tracking.
    `,
    examples: [['Upload the SBOM file sbom.json', 'datadog-ci sbom upload --service my-service file.sbom']],
});
//# sourceMappingURL=upload.js.map