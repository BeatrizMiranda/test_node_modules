"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadMobileApplicationVersion = exports.createNewMobileVersion = exports.uploadApplicationAndOverrideConfig = exports.shouldUploadApplication = exports.overrideMobileConfig = exports.uploadApplication = exports.uploadMobileApplications = exports.getSizeAndPartsFromFile = void 0;
const crypto = __importStar(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const api_1 = require("./api");
const errors_1 = require("./errors");
const UPLOAD_FILE_MAX_PART_SIZE = 10 * 1024 * 1024; // MiB
const getSizeAndPartsFromFile = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, e_1, _b, _c;
    const readStreamOptions = {
        // Limit the chunk size for the stream
        // https://nodejs.org/api/stream.html#buffering
        highWaterMark: UPLOAD_FILE_MAX_PART_SIZE,
    };
    const fileStream = fs_1.default.createReadStream(filePath, readStreamOptions);
    const parts = [];
    try {
        for (var _d = true, fileStream_1 = __asyncValues(fileStream), fileStream_1_1; fileStream_1_1 = yield fileStream_1.next(), _a = fileStream_1_1.done, !_a; _d = true) {
            _c = fileStream_1_1.value;
            _d = false;
            const chunk = _c;
            if (!(chunk instanceof Buffer)) {
                // this should never happen, but for-await-of creates an any that we don't want
                throw new Error('Unexpected chunk type from file stream');
            }
            parts.push({
                md5: crypto.createHash('md5').update(chunk).digest('base64'),
                partNumber: parts.length + 1,
                blob: chunk,
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (!_d && !_a && (_b = fileStream_1.return)) yield _b.call(fileStream_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        appSize: fileStream.bytesRead,
        parts,
    };
});
exports.getSizeAndPartsFromFile = getSizeAndPartsFromFile;
const uploadMobileApplications = (api, applicationPathToUpload, mobileApplicationId) => __awaiter(void 0, void 0, void 0, function* () {
    var _e, _f, _g;
    const { appSize, parts } = yield (0, exports.getSizeAndPartsFromFile)(applicationPathToUpload);
    let multipartPresignedUrlsResponse;
    try {
        multipartPresignedUrlsResponse = yield api.getMobileApplicationPresignedURLs(mobileApplicationId, appSize, parts);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to get presigned URL: ${(0, api_1.formatBackendErrors)(e)}\n`, (_e = e.response) === null || _e === void 0 ? void 0 : _e.status);
    }
    let uploadPartResponses;
    try {
        uploadPartResponses = yield api.uploadMobileApplicationPart(parts, multipartPresignedUrlsResponse.multipart_presigned_urls_params);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to upload mobile application: ${(0, api_1.formatBackendErrors)(e)}\n`, (_f = e.response) === null || _f === void 0 ? void 0 : _f.status);
    }
    const { upload_id: uploadId, key } = multipartPresignedUrlsResponse.multipart_presigned_urls_params;
    try {
        yield api.completeMultipartMobileApplicationUpload(mobileApplicationId, uploadId, key, uploadPartResponses);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to complete upload mobile application: ${(0, api_1.formatBackendErrors)(e)}\n`, (_g = e.response) === null || _g === void 0 ? void 0 : _g.status);
    }
    return multipartPresignedUrlsResponse.file_name;
});
exports.uploadMobileApplications = uploadMobileApplications;
const uploadApplication = (api, applicationPathToUpload, testApplicationId, uploadedApplicationByPath) => __awaiter(void 0, void 0, void 0, function* () {
    const fileName = yield (0, exports.uploadMobileApplications)(api, applicationPathToUpload, testApplicationId);
    if (!(applicationPathToUpload in uploadedApplicationByPath)) {
        uploadedApplicationByPath[applicationPathToUpload] = [];
    }
    uploadedApplicationByPath[applicationPathToUpload].push({
        applicationId: testApplicationId,
        fileName,
    });
});
exports.uploadApplication = uploadApplication;
const overrideMobileConfig = (userConfigOverride, overriddenTest, test, localApplicationOverride) => {
    if (localApplicationOverride) {
        overriddenTest.mobileApplication = {
            applicationId: localApplicationOverride.applicationId,
            referenceId: localApplicationOverride.fileName,
            referenceType: 'temporary',
        };
    }
    else if (userConfigOverride.mobileApplicationVersion) {
        overriddenTest.mobileApplication = {
            applicationId: test.options.mobileApplication.applicationId,
            referenceId: userConfigOverride.mobileApplicationVersion,
            referenceType: 'version',
        };
    }
};
exports.overrideMobileConfig = overrideMobileConfig;
const shouldUploadApplication = (applicationPathToUpload, testApplicationId, uploadedApplicationByPath) => !(applicationPathToUpload in uploadedApplicationByPath) ||
    !uploadedApplicationByPath[applicationPathToUpload].some(({ applicationId }) => applicationId === testApplicationId);
exports.shouldUploadApplication = shouldUploadApplication;
const uploadApplicationAndOverrideConfig = (api, test, userConfigOverride, overriddenTestsToTrigger, uploadedApplicationByPath) => __awaiter(void 0, void 0, void 0, function* () {
    const testApplicationId = test.options.mobileApplication.applicationId;
    if (userConfigOverride.mobileApplicationVersionFilePath &&
        (0, exports.shouldUploadApplication)(userConfigOverride.mobileApplicationVersionFilePath, testApplicationId, uploadedApplicationByPath)) {
        yield (0, exports.uploadApplication)(api, userConfigOverride.mobileApplicationVersionFilePath, testApplicationId, uploadedApplicationByPath);
    }
    const localApplicationOverride = userConfigOverride.mobileApplicationVersionFilePath
        ? uploadedApplicationByPath[userConfigOverride.mobileApplicationVersionFilePath].find(({ applicationId }) => applicationId === testApplicationId)
        : undefined;
    (0, exports.overrideMobileConfig)(userConfigOverride, overriddenTestsToTrigger, test, localApplicationOverride);
});
exports.uploadApplicationAndOverrideConfig = uploadApplicationAndOverrideConfig;
const createNewMobileVersion = (api, version) => __awaiter(void 0, void 0, void 0, function* () {
    var _h;
    let newVersion;
    try {
        newVersion = yield api.createMobileVersion(version);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed create new Mobile Version: ${(0, api_1.formatBackendErrors)(e)}\n`, (_h = e.response) === null || _h === void 0 ? void 0 : _h.status);
    }
    return newVersion;
});
exports.createNewMobileVersion = createNewMobileVersion;
const uploadMobileApplicationVersion = (config) => __awaiter(void 0, void 0, void 0, function* () {
    var _j;
    const api = (0, api_1.getApiHelper)(config);
    if (!config.mobileApplicationVersionFilePath) {
        throw new errors_1.CiError('MISSING_MOBILE_APPLICATION_PATH', 'Mobile application path is required.');
    }
    if (!config.mobileApplicationId) {
        throw new errors_1.CiError('MISSING_MOBILE_APPLICATION_ID', 'Mobile application id is required.');
    }
    if (!config.versionName) {
        throw new errors_1.CiError('MISSING_MOBILE_VERSION_NAME', 'Version name is required');
    }
    config.latest = (_j = config.latest) !== null && _j !== void 0 ? _j : false;
    const fileName = yield (0, exports.uploadMobileApplications)(api, config.mobileApplicationVersionFilePath, config.mobileApplicationId);
    const version = yield (0, exports.createNewMobileVersion)(api, {
        file_name: fileName,
        application_id: config.mobileApplicationId,
        original_file_name: config.mobileApplicationVersionFilePath,
        version_name: config.versionName,
        is_latest: config.latest,
    });
    return version;
});
exports.uploadMobileApplicationVersion = uploadMobileApplicationVersion;
//# sourceMappingURL=mobile.js.map