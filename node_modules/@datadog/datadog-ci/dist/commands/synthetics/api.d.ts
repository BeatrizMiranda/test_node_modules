/// <reference types="node" />
import type { AxiosError, AxiosPromise, AxiosRequestConfig } from 'axios';
import { APIConfiguration, APIHelperConfig, Batch, MobileApplicationUploadPart, MobileApplicationUploadPartResponse, MobileApplicationVersion, Payload, PollResult, MultipartPresignedUrlsResponse, ServerTest, SyntheticsOrgSettings, TestSearchResult, Trigger } from './interfaces';
interface BackendError {
    errors: string[];
}
export declare class EndpointError extends Error {
    message: string;
    status: number;
    constructor(message: string, status: number);
}
export declare const formatBackendErrors: (requestError: AxiosError<BackendError>) => string;
export declare const completeMultipartMobileApplicationUpload: (request: (args: AxiosRequestConfig) => AxiosPromise<void>) => (applicationId: string, uploadId: string, key: string, uploadPartResponses: MobileApplicationUploadPartResponse[]) => Promise<void>;
export declare const isForbiddenError: (error: AxiosError | EndpointError) => boolean;
export declare const isNotFoundError: (error: AxiosError | EndpointError) => boolean;
export declare const isNodeError: (error: unknown) => error is NodeJS.ErrnoException;
export declare const is5xxError: (error: AxiosError | EndpointError) => boolean | 0 | undefined;
export declare const apiConstructor: (configuration: APIConfiguration) => {
    getBatch: (batchId: string) => Promise<Batch>;
    getMobileApplicationPresignedURLs: (applicationId: string, appSize: number, parts: MobileApplicationUploadPart[]) => Promise<MultipartPresignedUrlsResponse>;
    getTest: (testId: string) => Promise<ServerTest>;
    getSyntheticsOrgSettings: () => Promise<SyntheticsOrgSettings>;
    getTunnelPresignedURL: (testIds: string[]) => Promise<{
        url: string;
    }>;
    pollResults: (resultIds: string[]) => Promise<PollResult[]>;
    searchTests: (query: string) => Promise<TestSearchResult>;
    triggerTests: (data: Payload) => Promise<Trigger>;
    uploadMobileApplicationPart: (parts: MobileApplicationUploadPart[], multipartPresignedUrlsParams: MultipartPresignedUrlsResponse['multipart_presigned_urls_params']) => Promise<MobileApplicationUploadPartResponse[]>;
    completeMultipartMobileApplicationUpload: (applicationId: string, uploadId: string, key: string, uploadPartResponses: MobileApplicationUploadPartResponse[]) => Promise<void>;
    createMobileVersion: (version: MobileApplicationVersion) => Promise<MobileApplicationVersion>;
};
export type APIHelper = ReturnType<typeof apiConstructor>;
export declare const getApiHelper: (config: APIHelperConfig) => APIHelper;
export {};
