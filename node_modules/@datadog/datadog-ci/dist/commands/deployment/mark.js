"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentMarkCommand = void 0;
const clipanion_1 = require("clipanion");
const tag_1 = require("../tag/tag");
const constants_1 = require("./constants");
/**
 * This command is a wrapper around the datadog-ci tag command, allowing customers to mark CI jobs
 * as deployments and setting specific properties, like the environment or the revision in a simple way.
 */
class DeploymentMarkCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.noFail = clipanion_1.Option.Boolean('--no-fail', false);
        this.isRollback = clipanion_1.Option.Boolean('--is-rollback', false);
        this.env = clipanion_1.Option.String('--env', {
            description: 'Example: prod',
        });
        this.revision = clipanion_1.Option.String('--revision', {
            description: 'Example: 1.0.0',
        });
        this.tags = clipanion_1.Option.Array('--tags');
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            const tagCommand = new tag_1.TagCommand();
            tagCommand.setLevel('job');
            tagCommand.setTags(this.createDeploymentTags());
            tagCommand.context = this.context;
            if (this.noFail) {
                tagCommand.setNoFail(true);
            }
            return tagCommand.execute();
        });
    }
    createDeploymentTags() {
        const tags = [constants_1.IS_DEPLOYMENT_TAG];
        if (this.env) {
            tags.push(constants_1.ENV_TAG + this.env);
        }
        if (this.revision) {
            tags.push(constants_1.REVISION_TAG + this.revision);
        }
        if (this.isRollback) {
            tags.push(constants_1.IS_ROLLBACK_TAG);
        }
        if (this.tags) {
            tags.push(constants_1.CUSTOM_TAGS_TAG + this.tags.join(','));
        }
        return tags;
    }
}
exports.DeploymentMarkCommand = DeploymentMarkCommand;
DeploymentMarkCommand.paths = [['deployment', 'mark']];
DeploymentMarkCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Mark a job as a deployment',
    details: `
      This command will mark a job as a deployment.\n
      See README for details.
    `,
    examples: [
        ['Mark a job as a deployment', 'datadog-ci deployment mark'],
        ['Mark a job as a deployment to the staging environment', 'datadog-ci deployment mark --env:staging'],
        ['Mark a job as a rollback deployment', 'datadog-ci deployment mark --is-rollback'],
        ['Mark a job as a deployment of the v123-456 version', 'datadog-ci deployment mark --revision:v123-456'],
    ],
});
//# sourceMappingURL=mark.js.map